---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: ${elastic_instance_name}
spec:
  version: 8.15.3
  count: 1
  elasticsearchRef:
    name: ${elastic_instance_name}
#  http:
#    service:
#      spec:
#        type: ClusterIP

#---
#apiVersion: gateway.networking.k8s.io/v1
#kind: HTTPRoute
#metadata:
#  name: elastic
#spec:
#  parentRefs:
#    - name: ${gateway_name}
#      namespace: ${gateway_namespace}
#      sectionName: elastic-https
#  hostnames:
#    - k8s-search.symplectic.internal
#  rules:
#    - matches:
#        - path:
#            type: PathPrefix
#            value: /
##            value: /es
##      filters:
##        - type: URLRewrite
##          urlRewrite:
##            path:
##              type: ReplacePrefixMatch
##              replacePrefixMatch: /
#      backendRefs:
#        - name: ${elastic_instance_name}-es-http
###          namespace: ${namespace_name}
#          port: 9200
#
## BackendTLSPolicy adds trust for ES root certificate when HTTPRout are routing
## to the ES HTTPS service.
#---
#apiVersion: gateway.networking.k8s.io/v1alpha3
#kind: BackendTLSPolicy
#metadata:
#  name: tls-upstream-elastic
#spec:
#  targetRefs:
#    - kind: Service
#      name: ${elastic_instance_name}-es-http
#      #name: foo-es-http
#      group: ""
#  validation:
#    caCertificateRefs:
#      - kind: ConfigMap
#        name: ${elastic_instance_name}-es-root-cert
#        group: ""
#    hostname: ${elastic_instance_name}-es-http.elastic.es.local
#
## Generates a ConfigMap with ES root certficate to be used by the BackendTLSPolicy above.
#---
#apiVersion: kyverno.io/v1
#kind: Policy
#metadata:
#  name: sync-es-root-cert
#spec:
#  useServerSideApply: true
#  rules:
#    - name: sync-es-root-cert
#      match:
#        any:
#          - resources:
#              kinds:
#                - Secret
#              names:
#                - "*-es-http-certs-public"
#      generate:
#        synchronize: true
#        generateExisting: true
#        apiVersion: v1
#        kind: ConfigMap
#        name: ${elastic_instance_name}-es-root-cert
###        namespace: ${namespace_name}
#        data:
#          kind: ConfigMap
#          data:
#            ca.crt: "{{ request.object.data.\"ca.crt\" | base64_decode(@) }}"
#            foo: bar
