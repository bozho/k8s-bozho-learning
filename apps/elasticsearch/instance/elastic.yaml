---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: ${instance_name}
spec:
  version: 8.15.3
  http:
    service:
      spec:
        type: ClusterIP
  nodeSets:
    - name: default
      count: 3
      config:
        node.store.allow_mmap: false
#    - name: masters
#      count: 3
#      config:
#        node.roles: ["master"]
#        xpack.ml.enabled: true
#        node.store.allow_mmap: false
#    - name: data
#      count: 3
#      config:
#        node.roles: ["data", "ingest", "ml", "transform"]
#        node.store.allow_mmap: false


---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: elastic
spec:
  parentRefs:
    - name: ${gateway_name}
      namespace: ${gateway_namespace}
      sectionName: elastic-https
  hostnames:
    - k8s-search.symplectic.internal
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
#            value: /es
#      filters:
#        - type: URLRewrite
#          urlRewrite:
#            path:
#              type: ReplacePrefixMatch
#              replacePrefixMatch: /
      backendRefs:
        - name: ${instance_name}-es-http
          namespace: ${namespace_name}
          port: 9200


#---
#apiVersion: gateway.networking.k8s.io/v1
#kind: HTTPRoute
#metadata:
#  name: elastic
#spec:
#  parentRefs:
#    - name: frontend
#      namespace: networking
#      sectionName: elastic-https
#  hostnames:
#    - k8s-search.symplectic.internal
#  rules:
#    - matches:
#        - path:
#            type: PathPrefix
#            value: /
##            value: /es
##      filters:
##        - type: URLRewrite
##          urlRewrite:
##            path:
##              type: ReplacePrefixMatch
##              replacePrefixMatch: /
#      backendRefs:
#        - name: ${instance_name}-es-https
#          namespace: ${namespace_name}
#          port: 9200

---
apiVersion: gateway.networking.k8s.io/v1alpha3
kind: BackendTLSPolicy
metadata:
  name: tls-upstream-elastic
spec:
  targetRefs:
    - kind: Service
      name: ${instance_name}-es-http
      #name: foo-es-http
      group: ""
  validation:
    caCertificateRefs:
      - kind: ConfigMap
        name: es-ca
        group: ""
    hostname: ${instance_name}-es-http.elastic.es.local

---
apiVersion: kyverno.io/v1
kind: Policy
metadata:
  name: sync-es-ca
spec:
  useServerSideApply: true
  rules:
    - name: sync-es-ca
      match:
        any:
          - resources:
              kinds:
                - Secret
              names:
                - "*-es-http-certs-public"
      generate:
        synchronize: true
        generateExisting: true
        apiVersion: v1
        kind: ConfigMap
        name: "{{ request.object.metadata.name}}-sync-test"
        data:
          kind: ConfigMap
          data:
            ca.crt: "{{ request.object.data.\"ca.crt\" | base64_decode(@) }}"
            foo: bazzz
